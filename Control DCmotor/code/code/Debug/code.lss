
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000630  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005aa  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <read_adc>:
#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))

unsigned char read_adc(unsigned char adc_input)
{
	// Set the ADC input channel
	ADMUX = (adc_input | ADC_VREF_TYPE);
  6c:	80 62       	ori	r24, 0x20	; 32
  6e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	8a 95       	dec	r24
  74:	f1 f7       	brne	.-4      	; 0x72 <read_adc+0x6>
  76:	00 00       	nop

	// Delay for 10 microseconds to allow the ADC to stabilize
	_delay_us(10);

	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6

	// Wait for the conversion to complete
	while ((ADCSRA & (1 << ADIF)) == 0);
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <read_adc+0xe>

	// Clear the ADIF flag
	ADCSRA |= (1 << ADIF);
  7e:	34 9a       	sbi	0x06, 4	; 6

	// Return the 8-bit ADC result
	return ADCH;
  80:	85 b1       	in	r24, 0x05	; 5
}
  82:	08 95       	ret

00000084 <main>:



int main(void)
{
	DDRA=0X00;
  84:	1a ba       	out	0x1a, r1	; 26
	PORTA=0X00;
  86:	1b ba       	out	0x1b, r1	; 27
	DDRB=0X00;
  88:	17 ba       	out	0x17, r1	; 23
	PORTB=0X00;
  8a:	18 ba       	out	0x18, r1	; 24
	DDRC=0X03;
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	84 bb       	out	0x14, r24	; 20
	PORTC=0X00;
  90:	15 ba       	out	0x15, r1	; 21
	DDRD=0X80;
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	81 bb       	out	0x11, r24	; 17
	PORTD=0X00;
  96:	12 ba       	out	0x12, r1	; 18
	
	ASSR &= ~(1 << AS2);
  98:	82 b5       	in	r24, 0x22	; 34
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	82 bd       	out	0x22, r24	; 34
	TCCR2=0X62;
  9e:	82 e6       	ldi	r24, 0x62	; 98
  a0:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00;
  a2:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
  a4:	13 bc       	out	0x23, r1	; 35
	ADMUX=ADC_VREF_TYPE;
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	87 b9       	out	0x07, r24	; 7
	;
	
	ADCSRA=0X81;
  aa:	81 e8       	ldi	r24, 0x81	; 129
  ac:	86 b9       	out	0x06, r24	; 6
	SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
  ae:	10 be       	out	0x30, r1	; 48

	OCR2=0;
  b0:	13 bc       	out	0x23, r1	; 35

	
	/* Replace with your application code */
	while (1)
	{
		OCR2=read_adc(0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <read_adc>
  b8:	83 bd       	out	0x23, r24	; 35
		
		if ((PINB & (1 << PINB0)) == 0)
  ba:	b0 99       	sbic	0x16, 0	; 22
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x3e>
		{
			PORTC &= ~(1 << PORTC0);
  be:	a8 98       	cbi	0x15, 0	; 21
			PORTC |= (1 << PORTC1);
  c0:	a9 9a       	sbi	0x15, 1	; 21
		}
		if ((PINB & (1 << PINB1)) == 0)
  c2:	b1 99       	sbic	0x16, 1	; 22
  c4:	f6 cf       	rjmp	.-20     	; 0xb2 <main+0x2e>
		{
			PORTC &= ~(1 << 0);
  c6:	a8 98       	cbi	0x15, 0	; 21
			PORTC &= ~(1 << 1);
  c8:	a9 98       	cbi	0x15, 1	; 21
  ca:	f3 cf       	rjmp	.-26     	; 0xb2 <main+0x2e>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
